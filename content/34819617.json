{"question_id": "34819617", "question_text": "像用户id这类特征，我们采取独热编码的形式利用它，但是往往它的维度很高啊，1000万个用户1000万维特征，需要做降维处理？还有我们为什么要利用这类id类特征？", "question_title": "机器学习中如何利用id类特征？", "question_commet": "​添加评论", "answer_number": "3 个回答", "question_followers": "224", "brower_number": "7,894"}
{"answer_author": "周开拓", "answer_id": 141213394, "answer_text": "谢邀：使用id类做特征在推荐系统、计算广告、反欺诈风控模型里都有成功的案例。所以不存在目前排名第一的答主所说的有没有用的问题，我个人认为他的一些观点可能有些过时了。事实是有用的。问题是为什么用（用了有啥好处），以及怎么用。一. 为什么用会极大提高模型的个性化能力和实际效果。而且可以对抗热度穿透现象。假设一个最简单的问题，预估广告的点击率CTR。为了便于讨论，假设你只有一个特征，就是每次展现广告在过去一个时间窗内的历史点击率ctr，现在目标是预测下一次点击的ctr。简单起见，不妨假设系统中只有两条候选广告。显而易见，预测分数是和ctr正相关的。如果你使用的是离散LR，那么在分段之后，显然ctr越高的分段上权重越大。这个模型实际跑起来就是最简单的“热门广告”的效果。现在你加入了一个新的特征，叫做设备id（更理想的情况当然是用户id）。那么你会发现，对于不同的用户id，也许能学出来一些权重。但是模型打分的排序应该基本是不变的。那么你会问：那这特征加进来有蛋用？当然有，假设最极端的情况，整个广告系统只有2个设备，一个设备属于普通用户，一个设备属于一个恶意的刷子（他专门用脚本点击某个广告以使得这条广告有更高几率被浮现）。那么由于普通用户他看到广告后实际点击率是比刷子低的。那么模型就学到了：导致广告更高点击率的原因其实是用户id。那么经过机器学习之后，刷子这个id的权重就高了，而ctr的权重就低了。那么相对来讲，尽管每个人看到的排序是一样的，但是其中刷子的刷分行为效果就被大大降低了。所以你在这里看到了第一个有趣的现象：直接加入id类特征，尽管并不能实现完全的个性化，但是可以把每个用户的行为模式区分开，从而提高了其他特征的泛化能力。再进一步地想：每个人对广告的喜好是一样的，这科学吗？那我希望模型对每个人的排序效果都不一样，这样广告系统就更加个性化了呀！于是你又增加了一个特征，叫做 设备id x 历史ctr。那么因为有了这个组合特征，LR就能学习到组合的信息。他实际的效果，就相当于对每个设备id建立了一个只有一个历史ctr作为特征的LR模型。那么这个模型，想必是比原始的模型效果更好的了。所以到这里你应该能发现加入id类特征的价值了：1. 可以使得在学习过程中，每个人的信号更合理地影响整体模型，使得模型泛化能力更好2. 可以使得模型能够对每个id有更细粒度的排序能力，使得模型的个性化效果更好。二. 怎么用1. id类特征上的信号是极其稀疏的，所以这意味着我们需要更大量的数据。但是其实这并没有想象中的难，计算广告、推荐系统这种机器学习场景中，单个id上收集的数据其实非常多。但是一定要通过正则的方法来限制以使得id类特征不过拟合。2. id类特征在预测中的命中率可能并不高，但这其实也不是问题。因为一个特征就是一个体系，一个体系化的特征是通过层次化的特征设计来达到命中率和个性化的综合。比如说 用户id->用户GPS坐标+用户喜好Tag+用户最近行为->用户年龄、用户性别。通过分层的，由最细粒度到最粗粒度的特征搭配来保证特征命中率3. 组合。单独的id类特征是意义并没有那么高，有意义的是不同层次的交叉组合。这取决于业务理解和特征工程手法。4. 模型和算法。实际上，LR是适合使用ID类特征的，原因在于LR适合接受超高维度的特征输入。对于XGBoost、DNN，这么高维度的特征进来，在工程和算法上都有挑战。然而其实针对这种超高维度特征灌入Tree、NN模型的方法，并不难想到，就是Embedding。具体的技术不方便多说，可以关注我们的公司http://www.4paradigm.com", "answer_votes": "67", "answer_comment": "​8 条评论"}
{"answer_author": "知乎用户", "answer_id": 59971326, "answer_text": "用one-hot encode处理ID是有这样的应用的，而且还不少，典型的比如CTR预估。如果决定这样用，一般是不需要降维的。这种处理特征的方式一般配合LR使用，完全有能力应对超高维度的数据而不会过拟合，并且数据维度可以随着训练过程扩展。使用的原因就是好用而且速度快呗。", "answer_votes": "4", "answer_comment": "​2 条评论"}
{"answer_author": "王赟 Maigo", "answer_id": 59967750, "answer_text": "先确定有没有用，没有用的特征果断舍弃。如果你对上一个问题的答案是“有用”，那么你就知道应当如何用了。这种用法肯定不是直接one-hot编码，因为这样编码后每维特征只会被激活一次，完全没有泛化能力。举几个例子：如果id是按用户的注册时间顺序发放的数字：如果用户的注册时间（或者说使用一个网站的年限）对当前任务没有用，则舍弃；如果其它特征中已经有“注册时间”或者“使用年限”，则这样的特征比id更好，同样舍弃id；如果没有其它特征可以表示注册时间或使用年限，则用id作为一个Interval scale的特征（虽然它本身只是Ordinal scale的）。如果id是身份证号码：从身份证号码中可以提取出地域（Nominal scale）、出生日期（Interval scale）或年龄（Ratio scale）、性别（Nominal scale）等，择其有用者保留。如果id是邮箱：邮箱的前缀基本上一定无用，后缀可以作为一个Nominal scale特征进行one-hot编码，若有用则保留。", "answer_votes": "7", "answer_comment": "​8 条评论"}
