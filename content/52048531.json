{"question_id": "52048531", "question_text": "本题已加入知乎圆桌 »「机器学习 · 学以致用」，更多「机器学习」相关话题讨论欢迎关注。想往机器学习方面发展。目前我的情况是C++和Java都会一些基础的东西，但是都不精通。要是两个都精那是不可能的，所以我想从里面选一个深入学习。目标是做数据挖掘,机器学习方面的算法工程师，请问需要掌握哪一个", "question_title": "机器学习工程师需要掌握哪些编程语言?", "question_commet": "​1 条评论", "answer_number": "43 个回答", "question_followers": "1,628", "brower_number": "137,877"}
{"answer_author": "知乎用户", "answer_id": 128726738, "answer_text": "取决于你希望做一些什么：- 机器学习的底层优化：C/C++，适当学习一些assembly和intrinsics。- 机器学习框架和算法的开发优化：C/C++，CUDA。根据工作的侧重可能需要了解OpenCL，OpenGL，甚至\nHDL，但是这些都是bonus。- 工业级别的分布式系统：依然是C/C++，了解分布式系统的知识比如说MPI，Spark，等等。- 机器学习模型的设计研究：Python 加上一两个机器学习的框架，最好还是要学一些C/C++。- 机器学习在前端的应用：Python，java（Android），Obj-C（iOS），但是这个其实基本上和机器学习没有太大关系。- 机器学习在大量传统公司当中的应用：他们以前用什么语言就什么语言。。。另外，作为面试官的话我会根据你的背景和偏好选择C++和Python之一。个人把这两个列为必须要会一门的语言。", "answer_votes": "630", "answer_comment": "​53 条评论"}
{"answer_author": "阿里云云栖社区", "answer_id": 226099026, "answer_text": "看到各位同学的精彩回答收获颇丰，有关机器学习工程师要掌握哪些编程语言，社区有一篇不错的文章分享过来，希望对大伙有所帮助机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。机器学习牵涉的编程语言十分之广，包括了MATLAB、Julia、R、Perl、Python、Clojure、Ruby等等。为了让开发者更加广泛、深入地了解机器学习，云栖社区组织翻译了GitHub Awesome Machine Learning 资源，涵盖24种编程语言的机器学习的框架、库以及其他相关资料。目录C通用机器学习计算机视觉C++计算机视觉通用机器学习自然语言处理序列分析手势识别Common Lisp通用机器学习 Clojure自然语言处理通用机器学习数据分析 /数据可视化Erlang通用机器学习Go自然语言处理通用机器学习 数据分析 /数据可视化Haskell通用机器学习Java自然语言处理 通用机器学习数据分析 /数据可视化深度学习Javascript自然语言处理数据分析 /数据可视化 通用机器学习 其他Julia通用机器学习自然语言处理数据分析/数据可视化其他项 /展示Lua通用机器学习示例和脚本Matlab计算机视觉自然语言处理通用机器学 数据分析 / 数据可视化.NET计算机视觉自然语言处理 通用机器学习数据分析 /数据可视化 Objective C通用机器学习OCaml通用机器学习PHP自然语言处理 通用机器学习 Python计算机视觉自然语言处理通用机器学习数据分析 /数据可视化 杂项脚本/ iPython笔记 /源码库 Kaggle竞赛源码 Ruby自然语言处理通用机器学习 数据分析 /数据处理 杂项Rust通用机器学习R通用机器学习数据分析 /数据可视化 SAS通用机器学习 数据分析 /数据可视化 高性能机器学习（MPP） 自然语言处理示例和脚本Scala自然语言处理数据分析 /数据可视化 通用机器学习 Swift通用机器学习 CreditsC------------------------------------------------------------------------------------通用机器学习Recommender  - 一个C语言库，利用协同过滤（CF）进行产品推荐/建议； Darknet  -是一个用C和CUDA编写的开源神经网络框架，它速度快，易于安装，并支持CPU和GPU计算。 计算机视觉CCV  -基于C语言、高速缓存的核计算机视觉库，是一个现代化的计算机视觉库； VLFeat  -开放、可便携的计算机视觉算法库，内有matlab工具箱。 语音识别HTK  -隐马尔可夫模型工具包（HTK）是一个便携式工具包，用于构建和操作隐马尔可夫模型。 C++------------------------------------------------------------------------------------计算机视觉OpenCV  -OpenCV自带C ++、C、Python、Java和MATLAB接口，并支持Windows、Linux、Android版和Mac OS等系统； DLib  -DLib有C ++和Python接口，用于人脸检测和训练通用的目标探测器； EBLearn  -Eblearn是一种面向对象的C++库，能够实现各种机器学习模型； VIGRA  -VIGRA是通用跨平台的C++计算机视觉和机器学习库，能够用Python绑定任意维度的体积。 通用机器学习mlpack  -可扩展的C++机器学习库； DLib  -ML工具套件，能够很容易嵌入到其他应用程序中； encog-cpp shark Vowpal Wabbit (VW)  -一个快速的核外（out-of-core ）学习系统； sofia-ml  -快速增量算法套件； Shogun  -Shogun机器学习工具箱； Caffe  -基于清洁度、可读性和速度考虑而开发的深度学习框架。[深度学习] CXXNET  -另一个深度学习框架，其核心代码少于1000行；[深度学习] XGBoost  -一种并行、优化、通用的梯度推进库； CUDA  -利用C++ / CUDA快速实现卷积；[深度学习] Stan  -一种概率性的编程语言，能够实现Hamiltonian Monte Carlo抽样的全贝叶斯统计推断； BanditLib  -一个简单、有多重保护的Bandit库； Timbl ：一个软件包/ C ++库，能够实现多种基于内存的学习算法，其中有IB1-IG--k-最近邻分类的实现、IGTree--IB1-IG的决策树近似值；常用于NLP； Disrtibuted Machine learning Tool Kit (DMTK)  -微软开发的分布式机器学习（参数服务器）框架，能够在多台机器的大型数据集上实现训练模型，与它捆绑的现有工具包括：LightLDA和分布式（多传感）字嵌入； igraph  -通用图形库； Warp-CTC  -在CPU和GPU上快速并行地实现连接时域分类（Connectionist Temporal Classification，CTC）； CNTK  -微软研究院开发的计算网络工具包（CNTK），它作为一系列计算步骤，通过有向图来描述神经网络，是统一的深度学习工具包； DeepDetect  -一个机器学习API，服务器用C++11编写，它使机器学习的状态易于工作，并容易集成到现有应用程序； Fido  -一个高度模块化的C++机器学习库，用于嵌入式电子产品和机器人中。自然语言处理MIT Information Extraction Toolkit  -C，C ++和Python的工具，用于命名实体识别与关系抽取； CRF++  -条件随机域（Conditional Random Fields，CRFs）的开源实现，用于分割/标记序列数据及其他自然语言处理任务； CRFsuite  -条件随机域（CRFs）的实现，用于标记序列数据； BLLIP Parser  -BLLIP自然语言解析器（也称为Charniak-Johnson解析器）； colibri-core  -是C++库、命令行工具，和Python绑定用于提取与使用基本的语言结构，例如用快速和高效存储的方式实现n-grams和skipgrams模型； ucto  -是一种工具和C++库，基于支持各种语言的编译器，内含统一字符标准及规则表达式；支持FoLiA格式； libfolia  -支持FoLiA格式的C++库； frog  -为Dutch开发的基于内存的NLP套件：POS标签、归类分析、依存句法分析、NER、浅层句法分析、形态分析； MeTA  -MeTA : ModErn 语篇分析（ModErn Text Analysis），是一个C++数据科学工具包，便于挖掘大文本数据。 语音识别Kaldi  -Kaldi是用于语音识别的工具包，用C++编写，由Apache许可证V2.0协议授权，专门给语音识别的研究人员使用。 序列分析ToPS  -这是一种面向对象的框架，便于在用户定义的字母序列中整合概率模型。 手势检测grt  -手势识别工具包（GRT）是一个跨平台、开源的C++机器学习库，用于实时的手势识别。Common Lisp------------------------------------------------------------------------------------通用机器学习mgl  -神经网络（玻耳兹曼机，前馈和循环网络）以及高斯过程； mgl-gpr  -演化算法； cl-libsvm  -LIBSVM支持向量机库的包装。 Clojure------------------------------------------------------------------------------------自然语言处理Clojure-openNLP - Clojure中自然语言处理的工具包（openNLP）； Infections-clj - Clojure和Clojure中类似于Rails的inflection库。 通用机器学习Touchstone - Clojure A/B 测试库； Clojush - Clojure中的Push程序语言和PushGP遗传编程系统； Infer - Clojure中分析和机器学习的工具； Clj-ML - Clojure中基于Weka及其相关环境的深度学习库； Encog - 在Clojure中封装成Encog (v3) （专门研究神经网络的机器学习框架）； Fungp -  Clojure中的遗传编程实例库； Statistiker - Clojure中基础机器学习算法； clortex -采用Numenta’s Cortical 学习算法的通用机器学习库； comportex - 采用Numenta’s Cortical 学习算法的功能组合的机器学习库。 数据分析/数据可视化Incanter - Incanter是基于 Clojure，类似R的统计计算与制图平台； PigPen -  Clojure中的Map-Reduce； Envision - 基于Statistiker和D3Clojure 数据可视化库。Erlang------------------------------------------------------------------------------------通用机器学习Disco-  Erlang中的Map Reduce模型。Go------------------------------------------------------------------------------------自然语言处理go-porterstemmer - 一个用于实现Porter词干提取算法的原生Go语言净室； paicehusk - Go语言中用于实现Paice/Husk词干提取算法； snowball - Go语言中的Snowball 词干提取器； go-ngram -内存N-gram索引压缩 。 通用机器学习Go Learn - Go语言中的机器学习库； go-pr - Go语言中的模式识别包； go-ml - 线性/逻辑回归、神经网络、协同过滤和多元高斯分布； bayesian - Go语言中朴素贝叶斯分类库； go-galib - Go语言版的遗传算法库； Cloudforest - GO语言中的决策树集合； gobrain - GO语言版的神经网络； GoNN - GoNN 是用Go语言实现的神经网络，它包括BPNN、RBF、PCN ； MXNet - 轻量级、便携式、灵活的分布式/深度学习系统，可对动态的、突变数据流调度部署，同时也支持Python、R、Julia、Go、Javascript 等编程语言。 数据分析/数据可视化go-graph - Go语言图形库； SVGo - Go语言的SVG生成库； RF - Go语言的随机森林库； Haskell------------------------------------------------------------------------------------通用机器学习haskell-ml - Haskell 语言实现的各种深度学习算法 ； HLearn - 根据代数结构解释其深度模型的库； hnn - Haskell语言的神经网络库； hopfield-networks - Haskell中用于无监督学习的Hopfield网络； caffegraph - 一种用于深度神经网络的领域特定语言（DSL）； LambdaNet - Haskell中的可配置的神经网络。Java------------------------------------------------------------------------------------自然语言处理Cortical.io - 像人脑一样快速、精确处理复杂的NLP（自然语言处理）操作（如消歧、分类、流文本过滤等操作）的Retina API； CoreNLP - 斯坦福大学的CoreNLP提供的一系列的自然语言处理工具，该工具可以根据输入原始英语文本，给出单词的基本形式； Stanford Parser - 一种自然语言分析器，可以分析语句的语法结构； Stanford POS Tagger -一个词性分类器  (POS Tagger）； Stanford Name Entity Recognizer - Stanford NER是一个Java实现的名称识别器； Stanford Word Segmenter - 分词器，很多NLP工作中都要用到的标准预处理步骤； Tregex, Tsurgeon and Semgrex - Tregex基于树关系以及节点匹配的正则表达式，用于在树状数据结构中进行模式匹配（名字是“tree regular expressions”的缩写） ； Stanford Phrasal: 一个基于短语的翻译系统 Stanford English Tokenizer - Stanford Phrasal 用Java写成的最新的基于统计短语的机器翻译系统； Stanford Tokens Regex - 一个分解器，可以将文本大致分成一系列对应于“词”的符号； Stanford Temporal Tagger - SUTime是一个用于识别并标准化时间表达式的库； Stanford SPIED -在种子集上使用模式，以迭代方式从无标签文本中进行学习实体； Stanford Topic Modeling Toolbox - 为社会科学家及其他希望分析数据集的人员提供的主题建模工具； Twitter Text Java - Java实现的推特文本处理库； MALLET - 基于Java的统计自然语言处理、文档分类、聚类、主题建模、信息提取以及其他机器学习的文本应用包； OpenNLP - 基于机器学习的自然语言文本处理工具包； LingPipe - 一个使用计算机语言学文本处理的工具包； ClearTK - 在Java中ClearTK为开发统计语言处理组件提供了一个框架，该框架是基于Apache UIMA； Apache cTAKES - Apache cTAKES是一个开源自然语言处理系统，用于从临床电子病历的自由文本中提取信息； ClearNLP - ClearNLP工程为自然语言处理提供了软件和资源提供了。该项目最早在计算机愈合和教育研究中心启动，目前由Emory 大学的语言和信息研究中心继续开发。该项目遵循Apache 2 license。 通用机器学习aerosolve - 是由Airbnb设计的定价建议系统的机器学习库； Datumbox -应对机器学习和统计应用快速发展的机器学习框架； ELKI - 用于数据挖掘的Java工具包(无监督：聚类、异常检测等等)； Encog - 一种先进的神经网络和机器学习框架。 Encog包含用于创建各类网络的类，同时也支持为神经网络规范和处理数据的类。它的训练采用多线程弹性传播。它也能使用GPU加快处理时间。提供了图形化界面来帮助建模和训练神经网络。 EvA2 - 包含遗传算法、差分进化、协方差自适应进化策略等等的进化算法框架； FlinkML in Apache Flink - Flink中的分布式机器学习库； H2O - 深度学习引擎，支持在Hadoop、Spark 或者通过R、Python、Scala 、REST/JSONML 的APIs连到的笔记本上进行分布式学习； htm.java - 采用Numenta Cortical 学习算法的通用机器学习库 ； java-deeplearning - Java、Clojure、Scala的分布式深度学习平台； JAVA-ML - 包含所有Java算法的通用接口的通用深度学习库； JSAT - 用于分类、回归、聚类的机器学习算法集合； Mahout - 分布式的机器学习库； Meka - MEKA提供了一个面向多标签学习和评价方法的开源实现（扩展成Weka）； MLlib in Apache Spark - Spark中的分布式机器学习程序库； Neuroph - Neuroph 是轻量级的Java神经网络框架； ORYX - 采用Apache Spark和Apache Kafka的Lambda 结构框架，专门用于实时大规模机器学习； Samoa - SAMOA 是一个包含用于分布式机器学习数据流的框架，同时为数据流流入不同的流处理平台提供了接口； RankLib - RankLib是一个排序学习算法库； rapaio - Java中用于统计、数据挖掘和机器学习的工具箱； RapidMiner - RapidMiner integration into Java code Stanford Classifier - 斯坦福大学分类器是一种机器学习工具，它可以将数据项归置不同的类别中； SmileMiner - 统计机器智能与学习引擎； SystemML - 灵活、可扩展的机器学习语言； WalnutiQ - 人脑部分面向对象模型； Weka - Weka是数据挖掘方面的机器学习算法集 。 语音识别CMU Sphinx - CMU Sphinx 是基于Java 语音识别库，用于纯语音识别开源工具包。 数据分析/数据可视化Flink - Apache Flink是一个面向分布式数据流处理和批量数据处理的开源计算平台； Hadoop - 大数据分析平台； Spark - Spark是一个快速通用的大规模数据处理引擎； Storm - Storm是一个分布式实时计算系统； Impala - 为Hadoop实现实时查询 DataMelt - 用于数字计算、统计、符号计算、数据分析和数据可视化的数学软件； Dr. Michael Thomas Flanagan's Java Scientific Library 深度学习Deeplearning4j - 采用并行GPU的商用可扩展深度学习库。Javascript------------------------------------------------------------------------------------自然语言处理Twitter-text - Twitter文本处理库中使用JavaScript的实现； NLP.js – 使用JavaScript和CoffeeScript的NLP实用工具； natural – 用于节点的通用自然语言工具； Knwl.js – JS中的自然语言处理器； Retext -用于分析和处理自然语言的可扩展系统； TextProcessing -情感分析，词干和词形还原，部分词性标注和组块，短语提取和命名实体识别； NLP Compromise - 浏览器中的自然语言处理。 数据分析/数据可视化D3.js High Charts NVD3.js dc.js chartjs dimple amCharts D3xter –直接建立在D3上的绘图； statkit – JavaScript的统计工具； datakit - JavaScript的轻量级数据分析框架； science.js - JavaScript中的科学统计计算； Z3d – 在Three.js上轻松地绘制交互式3D图； Sigma.js - JavaScript库，专门用于图形绘制； C3.js – 基于D3.js的定制库，能够轻松绘制图表； ZingChart - Vanilla JS编写的库，用于大数据可视化； cheminfo – 数据可视化和分析的平台，使用可视化项目。 通用机器学习Convnet.js - ConvNetJS是一个JavaScript库，用于训练深度学习模型[深度学习]； Clusterfck - 为Node.js和浏览器，用Javascript实现的凝聚层次聚类； Clustering.js – Javascript为Node.js和浏览器实现的聚类算法； Decision Trees -使用ID3算法实现NodeJS决策树； figue - K-均值、模糊C均值和凝聚聚类； Node-fann -Node.js绑定的快速人工神经网络库（Fast Artificial Neural Network Library，FANN）； Kmeans.js - K-均值算法用JavaScript的简单实现，用于Node.js和浏览器； LDA.js - Node.js的LDA主题建模； Learning.js –用Javascript实现逻辑回归/ c4.5决策树； Machine Learning - Node.js的机器学习库； Node-SVM - Node.js的支持向量机； Brain - JavaScript中的神经网络[已弃用]； Bayesian-Bandit - Node和浏览器的贝叶斯实现； Synaptic – 用于Node.js和浏览器的无架构神经网络库； kNear - JavaScript实现的k个最近邻算法，用于监督学习； NeuralN - Node.js的C++神经网络库，其优点是有大量的数据集和多线程训练； kalman - Javascript的卡尔曼滤波器； shaman - Node.js库，同时支持简单和多元的线性回归； ml.js –用于Node.js和浏览器的机器学习和数值分析工具； Pavlov.js -利用马尔可夫决策过程强化学习； MXNet - 轻量级、便携式、灵活的分布式/深度学习系统，可对动态的、突变数据流调度部署，同时也支持Python、R、Julia、Go、Javascript 等编程语言。其它sylvester – 用于JavaScript的向量和矩阵数学； simple-statistics - 描述，回归和推断统计的JavaScript实现；用文字实现的JavaScript，没有依赖性，能在所有现代浏览器（包括IE）以及在node.js中工作； regression-js – JavaScript库，包含小二乘法拟合方法的集合，用于寻找数据集的趋势； Lyric -线性回归库； GreatCircle – 计算大圆距的库。Julia------------------------------------------------------------------------------------通用机器学习MachineLearning - Julia机器学习库； MLBase -一组支持机器学习算法的发展的函数； PGM - 一个概率图模型的Julia框架； DA - 正则判别分析的Julia组件； Regression - 回归分析算法（例如线性回归和逻辑回归）； Local Regression -局部回归，超级流畅！ Naive Bayes - Julia朴素贝叶斯方法的简单实现； Mixed Models – 用于装配（统计）混合效应模型的Julia组件； Simple MCMC – Julia实现基本的MCMC采样； Distance - Julia距离评估模块； Decision Tree -决策树分类和回归； Neural - Julia神经网络； MCMC – Julia 的MCMC工具； Mamba – Julia中马尔可夫链蒙特卡罗（MCMC）的贝叶斯分析； GLM – Julia的广义线性模型。 Online Learning GLMNet – GMLNet的Julia包装版，适合套索/弹性网模型； Clustering -集群数据的基本功能：K-均值，DP-均值等； SVM – Julia适用的SVM； Kernal Density – Julia的核密度估计量； Dimensionality Reduction -降维方法； NMF - 非负矩阵分解的Julia包； ANN - Julia人工神经网络； Mocha – 受Caffe启发，Julia的深度学习框架； XGBoost – Julia中的eXtreme Gradient Boosting 包； ManifoldLearning – 用于流形学习和非线性降维的Julia组件； MXNet - 轻量级、便携式、灵活的分布式/深度学习系统，可对动态的、突变数据流调度部署，同时也支持Python、R、Julia、Go、Javascript 等编程语言。 Merlin - Julia灵活的深度学习框架。 自然语言处理Topic Models – Julia下的主题模型； Text Analysis – Julia下的文本分析包。 数据分析/数据可视化Graph Layout – 纯Julia实现的图布局算法； Data Frames Meta - DataFrames的元编程工具； Julia Data - 处理表格数据的Julia库； Data Read - 从Stata、SAS、SPSS读取文件； Hypothesis Tests – Julia的假设检验； Gadfly – Julia 灵活的统计制图法； Stats – Julia的统计图检验； RDataSets - 用于装载许多R中可用数据集的Julia包； DataFrames – 处理列表数据的Julia库； Distributions - 概率分布和相关函数的Julia包； Data Arrays - 允许缺失值的数据结构； Time Series – Julia的时间序列工具包； Sampling - Julia的基本采样算法。 其他项/展示DSP -数字信号处理（滤波，周期图，频谱图，窗函数）； JuliaCon Presentations – JuliaCon的演示文稿； SignalProcessing – Julia写的信号处理工具； Images – Julia的图像库。以上为“史上最全机器学习资料（上）”的全部内容，敬请期待下一节。编译自：https://github.com/josephmisiti/awesome-machine-learning译者：刘崇鑫   校对：王殿进原文链接：史上最全的机器学习资料（上）-博客-云栖社区-阿里云 ", "answer_votes": "61", "answer_comment": "​7 条评论"}
{"answer_author": "Frank Chu", "answer_id": 128714382, "answer_text": " Python:  下可写爬虫爬数据，可写脚本做数据预处理; 上可调用scikit-learn等机器学习框架，以及tensorflow，theano，mxnet等深度学习框架。 如果是放在线上的程序的话，一般会用c++ 或者java。个人推荐java，用java处理文本还是比较方便的。时间有限的话可以先学java，python，学会用一种机器学习和深度学习框架。", "answer_votes": "30", "answer_comment": "​5 条评论"}
{"answer_author": "陈阿荣", "answer_id": 225644795, "answer_text": "编程语言是大家比较关注的问题。AI工程师也会卷入各种平台和语言之争，在语言的选择上主要关注两点的：一程序员编程效率高，就是编的快；二就是编出的程序机器运行效率高，就是跑得快。在表达的时候，需要一种更善于表达的语言，运行的时候我们又恨不得需要一种更高性能的语言，所以通常会把两种语言糅合起来使用，比如Python跟C++，或者Scala跟Java这样的几种组合。微博一般就这两种组合。Scala基于Java，能够直接调用各种Java对象，而语法和Python一样比较简洁，代码相对短小，所以编起来不至于那样费劲。我们运行的很多平台基于Java，大规模计算平台是基于用Scala编写的Spark来定制，所以Scala+Java这样的组合也就很自然。顺便说下，微博实现了一个高性能分布式平台，规模达到了千亿样本，目标是万亿样本和百亿特征，大部分其他企业的同类型平台，因为多用于广告等相对内容消费低频的场景，支持的规模会比这个系统小一个数量级。所以微博的基于参数服务器的大规模机器学习平台在实践规模上属于前列，本质上还是因为有背后大业务的需求驱动。Python跟C++组合因为TensorFlow的引入而更流行，而这种组合的道理也是基于同样的逻辑：人工和机器并重，表达效率和运行效率齐飞。", "answer_votes": "11", "answer_comment": "​3 条评论"}
{"answer_author": "竹间智能 Emotibot", "answer_id": 142067959, "answer_text": "机器学习的算法以及应用都已经非常广泛，从最底层的硬件，到最上层的前端，每个分层用的语法都不尽相同。如果是问算法工程方面的话，我就从不同领域的工程师需要具备的语言来分析吧！* 钻研新算法、发paper的研究人员：Python，C/C++Python绝对是你最好的选择，Python不但拥有丰富的machine learning package，目前火爆的tensorflow，都是以Python作为最外层的api。除了拥有丰富的资源作后盾，Python语言上手门槛低，可读性高，不需要花大量的时间处理程序语言问题，可以投入更多精力在研究上。另一个语言就是C／C++啦！C/C++算是历史悠久的语言，效率高。像是影像处理等许多的应用大部分还是以C/C++作为开发工具，深度学习的框架底层也会用到C/C++，熟悉的话，C／C++也会是个很好的工具。* 数据 ETL工程师：Java在Big Data &Machine Learning 的时代，信息的量级已经不是一个简单的程序能够处理的。从4年前的Hadoop、Spark、Storm等一路走来，这些分布式系统让我们能更有效率地处理原始信息，并转换成干净的数据。虽然目前有许多可以连接Python的api接口，不过这一块的主要构成还是Java/Scala。如果想要进行更底层的操作，掌握Java会更加如虎添翼。* 数据分析、数据挖掘工程师：R如果想对资料作数据挖掘、统计分析，推荐使用R语言，R内建了许多统计学以及数字分析的功能，也能利用安装套件获取更多工具。而R语言具有高质量的绘图能力，如果信息量不大，可以作为你将数据可视化的一大利器；如果信息量大，R语言也提供了分布式处理的工具，不过效能方面还是有待观察。其实python在数据挖掘领域的表现也相当不错，所以如果你对R没有那么熟悉，Python也会是个不错的选择。说了这么多，如果你想当算法工程师，个人建议Python是必须要掌握的语言，上手简单不吃亏，有时候还可以写个小程序处理数据。而目前你掌握的Java、C++，建议先精通Java，哪天对算法感到厌倦了，想回到应用端，Java可以成为你的杀手锏！", "answer_votes": "9", "answer_comment": "​2 条评论"}
{"answer_author": "贺勇", "answer_id": 128888776, "answer_text": "谢邀。就在公司而言，java与python。对于很多人说c++，一般作为某个机器学习算法库的开发语言，因为c++在语言性能上比java要高，但是现在来说，一般常用的算法库都已经开发好了，然后用到业务中。而实践中，很多业务并不是用常用的算法就能处理好的，需要自己写适合自己问题的算法或者对常用的机器学习算法进行改进，或者一般性的算法。因此一般使用java与python。因为数据量一大，就需要分布式，而很多分布式工具都是面向使用者都是java的，比如mpi，mapreduce，spark（scala），graph等，并且java很多开发库，以及开发效率比c++高，比如做nlp。python一般是单机处理数据，快速验证算法等，以及一些简单的udf。对了，不要忘记sql。来处理数据。最后一句：不要迷恋语言，对于算法，优化算法的时间复杂度以及空间负责度比使用那种语言更加可取。而且java不断在提升语言效率。", "answer_votes": "15", "answer_comment": "​1 条评论"}
{"answer_author": "知乎用户", "answer_id": 177838953, "answer_text": "Python > Java > c++机器学习最重要的几点在于，数据预处理、模型构建与训练、模型的部署与服务提供。数据预处理：Python/Java/Scala配上Spark非常顺手和快捷模型构建与训练：目前的大多数机器学习和深度学习框架都是用Python作为基础构建语言，其他语言也有很多框架，但是快速的构建模型，快速的进行各种验证，Python有显著的优势。模型的部署与服务提供：Serving方面还是用c++和Java为主（效率考虑），使用python训练出来的模型，其实有很多办法可以让其他语言进行调用。而且一些框架本身也提供原生的方法将模型保存为独立的文件，然后再用其他语言load进来。如TensorFlow1.1开始有的官方Java API，就可以直接load保存的模型，进行预测。", "answer_votes": "4", "answer_comment": "​添加评论"}
{"answer_author": "优达学城（Udacity）", "answer_id": 140677790, "answer_text": "优达君在这儿跟大家分享我们家老大特龙教授( @Sebastian Thrun )的回答。进入人工智能领域，Python是完美的。Python 是一门很棒的编程语言。对于成为一名精通人工智能、机器学习的程序员所需处理的所有事情，我认为如果你知道如何编程，使用什么语言并不重要。如果你知道如何编程，你应该可以轻松地转换到其他语言。刚开始工作的时候，我用的是 C 和 C++，比起 Python，它们存在一些优点和许多缺点。C++ 当然更加高效。但是用来快速制作原型就会比较困难。后来的工作中，我开始使用 Python。现在，我更多的使用 Python，我也会使用 Matlab 和其他语言。在一定程度上，Python 更棒。你应该能够以任何语言，几乎是以同样的方式去实现基本概念。更多关于特龙教授( @Sebastian Thrun  ) 关于人工智能机器学习的分享，请参阅 Sebastian Thrun知乎Live实录", "answer_votes": "12", "answer_comment": "​添加评论"}
{"answer_author": "moonfighting", "answer_id": 128715919, "answer_text": "必会的：python，强大的科学计算和机器学习算法库，可以让你快速实现各种常见算法，居家旅行之首选。其他的，C++或java，各个公司要求不一样", "answer_votes": "4", "answer_comment": "​添加评论"}
{"answer_author": "熊辰炎", "answer_id": 128713062, "answer_text": "谢邀。Tensorflow， Theano，Torch， Caffe选一即可。当然keras也是很好的。", "answer_votes": "23", "answer_comment": "​13 条评论"}
{"answer_author": "随心所往", "answer_id": 128896643, "answer_text": "从重要性来说，我认为第一位是 Python，目前主流的库都默认支持的第二位是R，很多学术论文的算法都是提供R的实现", "answer_votes": "1", "answer_comment": "​添加评论"}
{"answer_author": "李庆斌", "answer_id": 128718598, "answer_text": "如果从C++和Java里二选一，那我选择Java。Java在机器学习和数据挖掘上应用面更广，实用性更强。此外，Python是必会的，平时爬数据、清理数据、做分析需要用到。Hadoop, Spark等框架不求精通，但是基本的东西还是要会的。至于深度学习相关的东西，虽然现在很火，但是真正能用到的岗位并不多，学习的优先级可以适当降低。", "answer_votes": "18", "answer_comment": "​3 条评论"}
{"answer_author": "zeag", "answer_id": 128819102, "answer_text": "谢邀。如果只能学一种的话：Python如果能学两种的话：Python Java当然最好能学三种啦！Python Java C++题主的目标是机器学习和数据挖掘，这个方向最核心的是什么？数学和机器学习算法，这也是和其他计算机方向最本质的区别。这就是我为什么首推Python，这门语言可以不用牵扯你太多精力，你可以更多关注模型本身，在学习的过程中可以快速实现一个demo，不断给自己正反馈，可以查查coursera和edx上大多数机器学习课程教学语言时Python。第二个推Java是根据目前市场上机器学习岗位要求，Java岗位多余于C++，因为企业很多事时候更多关注的是业务，熟悉java可以快速帮助你找到不错的工作。第三个就是C++了，目前的情况是：很多机器学习库底层都是C++，然后给出Python和Java的接口进行调用，C++可以让你的算法更加高效。总结一下，其实要看你处于一个什么状态以及你自己的一个定位，如果你是一个机器学习的入门者那就python，专心学模型算法。当你觉得你模型这些东西都理解透彻了，觉得现有的包都太渣了，想自己写或者改改他们就可以上C++和Java了。", "answer_votes": "18", "answer_comment": "​2 条评论"}
{"answer_author": "造数科技", "answer_id": 225789719, "answer_text": "MATLAB、R、Python、Java/C、ELMMATLAB数百万软件工程师和开发人员已经使用MATLAB来评估，分析和开发改变我们生活方式的尖端系统和产品。 MATLAB是一种基于矩阵的语言，已经成为演示计算数学的最简单的方法。通过内置的图形和全面的开发环境，MATLAB可以让分析人员和开发人员轻松地查看数据并从中获得有意义的见解。它是一个为开发人员提供理想的桌面环境来实验，探索和发现新的算法和方法的平台。除此之外，MATLAB的工具是经过测试和测试的语言，其计算能力已经被设计和测试了耐用性。总体而言，MATLAB是用于矩阵表示和执行的完美机器学习语言。它也提供了一个完美的平台，用于在泄露给定方法学的线性代数时使用。该语言很好地自我学习算法作为一个刷新，以及全面的了解，当试图了解复杂的方法。目前在许多初级大学课程中，这是一种非常受欢迎的语言。 MATLAB对复杂矩阵运算的适用性由详细的特征矩阵补充。R 在一段时间内，R一直是统计分析工作和机器学习的主要语言。 R机器学习语言由于其复杂的性质和广泛的学习曲线，是为高级用户而设计的。话虽如此，它是通过图形来理解和探索统计数据的人的完美平台。 R拥有几乎无数的机器学习算法和复杂的实现，全部由算法开发者编写。对于想要发现，设计和测试算法的人来说，这是一种有能力的语言。它最适合于包含文物的一次性项目，如报告，研究论文，甚至预测。 R目前是竞争对手最受欢迎的机器学习平台，如Kaggle，因为他们喜欢Python等其他语言。R在数据分析和算法选项方面提供更多的功能，并且由于默认存在的众多机器学习算法，这也是一个非常强大的工具，使其成为未来准备好的机器学习语言。唯一可能的问题是，R的所有算法都是由第三方供应商创建的，这通常会导致开发者体验不一致。这可能会影响生产力，因为开发人员必须学习如何建模数据，以及在每个包中重复预测每个算法。PythonPython机器学习语言是一种数据科学书籍，已经与制造业一起使用了一段时间，并且被用于将生产系统投入运行。 Python是一种领先的机器学习系统，可以让用户直接访问预测分析，因此证明自己是世界上最重要的数据科学语言。开发人员已经成为一种机器语言，这些开发人员正在寻找更好的问题或扩大现有机器学习系统的能力。Python是一种全面的语言，涵盖了一系列图书馆，包括Teano，Keras和scikit学习的图书馆。它还具有易于理解的演练，甚至从意见分析到神经网络的有用提示，允许用户找到复杂问题的答案。 Python是日益流行的科学语言之一，其用户友好性仅仅增加了其吸引力。 Python也是一个有用的通信工具，使我们更接近于再现性的未来。在这方面，Python比其他机器语言相对分散，这可以大大降低生产力。Java/C机器学习是一系列复杂的算法，而不仅仅是黑魔法，而C系列机器学习语言是设计和以用户为中心的功能如何使序列自动化的完美示例。 对于后续的生产实施，C为用户提供了一个强大的库，使他们可以自定义项目特定算法的实现。Java / C系列机器学习语言是经验丰富的开发人员的天堂，有时间使用综合图书馆进行微调。 这并不奇怪，大多数当前和较旧的机器学习算法都是用Java编写的。 LIBLINEAR和LIBSVM的深入学习实现都是以C系列语言编写的，其中使用Python和其他工具作为杠杆。 Java是一种功能编程语言，可以让未来的机器学习系统具有速度，准确性和精度。Extreme Learning Machines (ELM)ELM是一种高度功能的编程语言，允许用户轻松创建基于浏览器的用户界面。 ELM使用功能强大的编程风格和图形布局，具有高度的反应性，允许用户设计界面而不会发生任何灾难性的更新。 编程语言的使用寿命通常很短，但是极限学习机（ELM）语言是一种前景光明的语言。在理论上，ELM被认为是一种编程语言，但是对于所有实际的目的，它可以与jQuery，CoffeeScript等平台更为紧密地进行比较。 极限学习机（ELM）由于其学习速度的前景而具有巨大的潜力，使其成为目前主导云计算的大数据应用程序的完美语言。 只要解决了嘈杂的数据性能的基本问题，它一定会有影响力的。", "answer_votes": "3", "answer_comment": "​添加评论"}
{"answer_author": "静平", "answer_id": 207701725, "answer_text": "GitHub 上有一个awesome-machine-learning ,是 josephmisiti 发起维护的机器学习资源列表，内容包括了机器学习领域的框架、库以及软件。这个资源列表是按照编程语言排序，什么语言在机器学习领域应用的多，在哪些细分领域应用的多，一目了然。", "answer_votes": "2", "answer_comment": "​添加评论"}
{"answer_author": "王睿", "answer_id": 151177033, "answer_text": "编程语言真的是一个很次要的问题。自己去google搜索下面的关键词吧，很多机器学习的算法实现。machine learning in Javamachine learning in C++machine learning in Pythonmachine learning in Matlabmachine learning in R", "answer_votes": "1", "answer_comment": "​添加评论"}
{"answer_author": "大野人007", "answer_id": 139730141, "answer_text": "如果是喜欢数据分析和算法应用的，Python和R语言必须掌握一门，参加各种数据比赛或者找数据分析之类的工作一般都是有必要的；如果是专门从事深度学习的，而且偏图像处理的话，还是 Theano，Torch， Caffe用的多一些，Tensorflow（Python）在工业界也会经常用，但是因为它含有的现有的训练好的模型不多，所以做迁移不是很方便，但如果不是做图像方面的事情，可以考虑Tensorflow。这几个工具具体的对比在Stanford的深度学习课程中的第12章有专门对比和分析。至于所谓的C++,C这些底层的编程语言，如果不是喜欢重新造轮子，或者对于性能的要求过高，做这些底层架构的话，可以暂时不用去学；当然做分布式之类的话C/C++也经常会需要，同时MPI，Spark也得会。当然如果希望读博或者从事研究的话，Matlab，python，R这些是经常出现的，基本可以满足你的需求。不过我个人是偏向于Python的，也很推荐你学习一下python。", "answer_votes": "1", "answer_comment": "​1 条评论"}
{"answer_author": "邓欣乐", "answer_id": 128892831, "answer_text": "python 和 C++，但这里指的python不是指用 scikit-learn 就可以的。要真正掌握一个框架的使用", "answer_votes": "1", "answer_comment": "​1 条评论"}
{"answer_author": "三更寒天", "answer_id": 128799068, "answer_text": "node.js一切能用js解决的问题，最终都会用js来解决。", "answer_votes": "2", "answer_comment": "​添加评论"}
{"answer_author": "匿名用户", "answer_id": 225671115, "answer_text": "普通工程师：C艹加大蟒，爪哇加scala文艺工程师：R2B工程师：Matlab", "answer_votes": "0", "answer_comment": "​1 条评论"}
{"answer_author": "Lanzhe Guo", "answer_id": 225349186, "answer_text": "python", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "linzhenjie", "answer_id": 177174799, "answer_text": "语言不重要，重要是有自己的积累，自己上手的工具", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "沈金斌", "answer_id": 148650534, "answer_text": "matlab。有的时候配合python", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "Xiao了个白", "answer_id": 146535231, "answer_text": "python", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "huangshuyun90", "answer_id": 140652586, "answer_text": "实验阶段用matlab或者python居多吧，做成产品用出于效率考虑多用C/C++吧", "answer_votes": "0", "answer_comment": "​1 条评论"}
{"answer_author": "地命海心", "answer_id": 139368923, "answer_text": "至少熟悉C++/python/r等一门语言；", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "不如不说", "answer_id": 137625522, "answer_text": "学习机器学习有以下目的(1) 研究计算学习理论(Computational Learning Theory)，这些研究大多不需要编程，会用Latex写推导和证明就行了(2) 创造新的机器学习模型，这个情况要学会使用R和Matlab演示算法(3) 研究如何将机器学习应用于大数据，这种情况不仅要学会Matlab, Java, Python或R，还需要学习Hadoop, Spark, CUDA等计算工具(4) 成为企业的数据科学家，这种情况下不仅要会编程，还必须了解企业系统的架构，并写出高质量的代码如果你是数学背景不擅长编程，依然可以搞机器学习了。但编程越少的领域，理论和数学就越多，而理论和数学往往比编程艰深上万倍，越理论搞的人就越少。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "郑旭斌", "answer_id": 137008701, "answer_text": "matlab。有的时候配合python因为比较方便但实际上所有语言都可以应用机器学习算法。。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "微笑", "answer_id": 136466907, "answer_text": "先学python，会用开源项目，进阶学C++或java", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "者也", "answer_id": 135799617, "answer_text": "学习机器学习有以下目的(1) 研究计算学习理论(Computational Learning Theory)，这些研究大多不需要编程，会用Latex写推导和证明就行了(2) 创造新的机器学习模型，这个情况要学会使用R和Matlab演示算法(3) 研究如何将机器学习应用于大数据，这种情况不仅要学会Matlab, Java, Python或R，还需要学习Hadoop, Spark, CUDA等计算工具(4) 成为企业的数据科学家，这种情况下不仅要会编程，还必须了解企业系统的架构，并写出高质量的代码如果你是数学背景不擅长编程，依然可以搞机器学习了。但编程越少的领域，理论和数学就越多，而理论和数学往往比编程艰深上万倍，越理论搞的人就越少", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "高海霞", "answer_id": 135484651, "answer_text": "入门级的应该是学会用python，使用一些开源系统的接口", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "橙子先森", "answer_id": 134834317, "answer_text": "就python先掌握了入门没问题", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "MyCai", "answer_id": 134655941, "answer_text": "python", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "墙外行人", "answer_id": 128998999, "answer_text": "我认为要精通的话，还是C++好些，Python会基础就OK了。毕竟与底层打交道比较多的还是C++。这个难，多花时间学习，争取两者都掌握。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "知乎用户", "answer_id": 128941969, "answer_text": "推荐Python和R，能会点Scala更好。Java和C++感觉是码农基本功，谈不上要精通的话，常见的用法最好了解清楚。 ", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "kevinshuang", "answer_id": 128892897, "answer_text": "机器学习本身，r与python至少一个，因为这2个有大量的模型可以用。另外就是scala，数据量大时spark ml。另外我是做推荐系统的，你会发现不可能单纯做算法就行了，后台server也要你写~所以c++或者java也要会，具体看你去哪家公司", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "HDZhang", "answer_id": 128820934, "answer_text": "目前在做金融方面机器学习，主要使用python，但是在考虑把scala（Spark）部署到服务器上。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "张玉鹰", "answer_id": 128808237, "answer_text": "jvm系列的，例如java和scala。 主要是开源大数据生态一般都是hadoop生态系统，例如hadoop的hdfs,yarn，以及spark，flink计算框架。 另一个是脚本系列的，主要是本地验证算法是否有效，主要是Python，R    ,MATLAB等", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "首刀房主经验加倍", "answer_id": 128748308, "answer_text": "python，r，Matlab这种吧。python最容易。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "匿名用户", "answer_id": 128747337, "answer_text": "我觉得机器学习最重要的一点不是语言的问题，而是数学的问题，机器学习这玩意看天赋，天赋中很重要的是数学基础", "answer_votes": "5", "answer_comment": "​4 条评论"}
{"answer_author": "铁腕", "answer_id": 144381826, "answer_text": "实际上所有语言都可以应用机器学习算法", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "唐一", "answer_id": 137803545, "answer_text": "精通机器学习不一定需要精通一门编程语言。假如你的数学功底达到了 Alexey Chervonenkis （VC理论的创始人之一，基本可以肯定不精通编程语言）的程度，那你可以去统计学习理论领域开疆拓土；假如你的运算能力达到了可以心算大矩阵奇异值分解，那你可以去直接人脑开发和优化新算法，不会语言没关系，写伪代码也可以。", "answer_votes": "0", "answer_comment": "​1 条评论"}
{"answer_author": "白小白", "answer_id": 139730065, "answer_text": "精通机器学习不一定需要精通一门编程语言。假如你的数学功底达到了 Alexey Chervonenkis （VC理论的创始人之一，基本可以肯定不精通编程语言）的程度，那你可以去统计学习理论领域开疆拓土；假如你的运算能力达到了可以心算大矩阵奇异值分解，那你可以去直接人脑开发和优化新算法，不会语言没关系，写伪代码也可以。", "answer_votes": "0", "answer_comment": "​添加评论"}
