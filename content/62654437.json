{"question_id": "62654437", "question_text": "身边的人都在谈论机器学习，我在写完《深入分析GCC》后，想在编译优化方面稍微再深入一下。不知道机器学习是否可以在编译优化方面有所应用？特开此贴，请各位高人指点迷津，感谢了。", "question_title": "机器学习与编译优化？", "question_commet": "​3 条评论", "answer_number": "5 个回答", "question_followers": "348", "brower_number": "5,475"}
{"answer_author": "知乎用户", "answer_id": 200673548, "answer_text": "compiler design handbook 有一节讲机器学习在后端趟组织优化的文章，还有收集配置信息，根据语言和目标机器指定一些优化趟。1. Statistical and Machine Learning Techniques in Compiler Design. 这篇文章主要的想法是利用统计方法求解不同优化趟之间的约束、指令调度和寄存器分配之间冲突的多目标优化。如何更好的组织趟序，如何设置编译的优化标识和参数等。他这个思想和基于profile的优化很类似，只不过更加深入，将上述目标通过统计和机器学习的技术使得编译优化更加的智能和自动化，不需要编译器编写者的手工定制，就能根据前端输入语言的特性，后端的机器特性，优化目标，然后自动地选择优化趟，组织趟序，执行代码生成，调度，寄存器分配等。目标是好啊，只不过我感觉太难了，涉及到的变量太多，而且没有形式化的描述，实际的工业级编译器中尚未实现，这篇文章主要还是理论上给出一种思路。后端更多的是启发式的小技巧，文章的作者也说编写编译器后端一般都是大量的小技巧堆成的，不像中端优化，有成熟的算法和思想，后端更多的是一种朴素地、经验性的想法实现。", "answer_votes": "8", "answer_comment": "​3 条评论"}
{"answer_author": "灵剑", "answer_id": 200922465, "answer_text": "感觉有点难，机器学习适合解决的是难以建模但容易判别的问题，而编译优化是很难判别的，没有通用的方法判定两个任意给定的程序是否等效。用机器学习辅助来加快编译速度可能还有些前景。", "answer_votes": "5", "answer_comment": "​4 条评论"}
{"answer_author": "王东岳", "answer_id": 202538033, "answer_text": "tensorflow有一个功能叫做XLA，与编译优化直接相关。", "answer_votes": "1", "answer_comment": "​添加评论"}
{"answer_author": "shinezyy", "answer_id": 200987213, "answer_text": "有，用MCMC加速super optimization，可以看看ASPLOS 2013这篇文章：Stochastic superoptimization因为我既不是做编译优化的，也不是做机器学习的，所以就不勉强地解释了。", "answer_votes": "0", "answer_comment": "​添加评论"}
{"answer_author": "Stephen", "answer_id": 200749968, "answer_text": "有统计信息可以帮住优化，机器学习还是算了吧", "answer_votes": "0", "answer_comment": "​添加评论"}
